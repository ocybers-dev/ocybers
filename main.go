// Code generated by hertz generator.

package main

import (
	"context"
	"github.com/ocybers-dev/ocybers/biz/dal"
	"time"

	gpaseto "aidanwoods.dev/go-paseto"
	"github.com/cloudwego/hertz/pkg/app"
	"github.com/cloudwego/hertz/pkg/app/middlewares/server/recovery"
	"github.com/cloudwego/hertz/pkg/app/server"
	"github.com/cloudwego/hertz/pkg/common/hlog"
	"github.com/cloudwego/hertz/pkg/common/utils"
	"github.com/cloudwego/hertz/pkg/protocol/consts"
	"github.com/hertz-contrib/cors"
	"github.com/hertz-contrib/gzip"
	"github.com/hertz-contrib/logger/accesslog"
	hertzlogrus "github.com/hertz-contrib/logger/logrus"
	"github.com/hertz-contrib/paseto"
	"github.com/hertz-contrib/pprof"
	"github.com/ocybers-dev/ocybers/biz/router"
	"github.com/ocybers-dev/ocybers/conf"
	"go.uber.org/zap/zapcore"
	"gopkg.in/natefinch/lumberjack.v2"
)

func main() {
	// init dal
	dal.Init()
	address := conf.GetConf().Hertz.Address
	h := server.New(server.WithHostPorts(address))

	registerMiddleware(h)

	// add a ping route to test
	h.GET("/ping", func(c context.Context, ctx *app.RequestContext) {
		ctx.JSON(consts.StatusOK, utils.H{"ping": "pong"})
	})

	router.GeneratedRegister(h)

	h.Spin()
}

func registerMiddleware(h *server.Hertz) {
	// log
	logger := hertzlogrus.NewLogger()
	hlog.SetLogger(logger)
	hlog.SetLevel(conf.LogLevel())
	asyncWriter := &zapcore.BufferedWriteSyncer{
		WS: zapcore.AddSync(&lumberjack.Logger{
			Filename:   conf.GetConf().Hertz.LogFileName,
			MaxSize:    conf.GetConf().Hertz.LogMaxSize,
			MaxBackups: conf.GetConf().Hertz.LogMaxBackups,
			MaxAge:     conf.GetConf().Hertz.LogMaxAge,
		}),
		FlushInterval: time.Minute,
	}
	hlog.SetOutput(asyncWriter)
	h.OnShutdown = append(h.OnShutdown, func(ctx context.Context) {
		asyncWriter.Sync()
	})

	// pprof
	if conf.GetConf().Hertz.EnablePprof {
		pprof.Register(h)
	}

	// gzip
	if conf.GetConf().Hertz.EnableGzip {
		h.Use(gzip.Gzip(gzip.DefaultCompression))
	}

	// access log
	if conf.GetConf().Hertz.EnableAccessLog {
		h.Use(accesslog.New())
	}

	// recovery
	h.Use(recovery.Recovery())
	// cores
	corsConfig := cors.Config{
		AllowOrigins:     []string{"*"}, // 指定允许的域名（可以根据需求调整）
		AllowMethods:     []string{"GET", "POST", "PUT", "DELETE", "OPTIONS"},
		AllowHeaders:     []string{"Authorization", "Content-Type"}, // 明确允许Authorization头
		AllowCredentials: true,
	}
	// 使用自定义的CORS配置
	h.Use(cors.New(corsConfig))

	//paseto(JWT)
	next := func(ctx context.Context, c *app.RequestContext) bool {
		// return string(c.Path()) == "/user/login" || string(c.Path()) == "/user/register"
		return true
	}
	parseFunc, _ := paseto.NewV4PublicParseFunc(
		paseto.DefaultPublicKey,
		[]byte(paseto.DefaultImplicit),
		paseto.WithIssuer(conf.GetConf().Hertz.PaseToIssuer),
	)
	successFunc := func(ctx context.Context, c *app.RequestContext, token *gpaseto.Token) {
		var username string
		if err := token.Get("username", &username); err != nil {
			c.String(consts.StatusBadRequest, "Failed to get '' from token")
			c.Abort()
		}
		c.Set("username", username)
	}
	h.Use(paseto.New(paseto.WithNext(next), paseto.WithParseFunc(parseFunc), paseto.WithSuccessHandler(successFunc)))
}
